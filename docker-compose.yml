# docker-compose.ymlフォーマットのバージョン指定
version: '3'
services:
  # Railsコンテナ定義
  web:
    # Dockerfileを使用してイメージをビルド
    build: .
    # コンテナ起動時のデフォルトコマンド
    # ポート番号：3000
    # バインドするIPアドレス：0.0.0.0
    # ポート3000が来たらrailsサーバーが応答
    #command: /bin/sh -c "rm -f tmp/pids/server.pid && bundle exec rails s -p 3000 -b '0.0.0.0'"
    #command: bundle exec rails s -p 3000 -b '0.0.0.0'
    #command: dockerize -wait tcp://db:3306 -timeout 20s bundle exec unicorn -p 3000 -c /app/config/unicorn.conf.rb
    command: bundle exec unicorn -p 3000 -c /app/config/unicorn.conf.rb
    # ローカルのsrcをコンテナにマウント
    volumes:
      - ./src:/app
    # コンテナの外部に3000番を公開
    # 公開するポート番号：コンテナ内部の転送先ポート番号
      - tmp-data:/app/tmp/sockets
    #画像データとかをnginxと共有
      - public-data:/app/public
    
    ports:
      - 3000:3000
    # dbコンテナが先に起動するよう設定
    depends_on:
      - db
    # pryを使用してデバッグができるよう設定
    tty: true
    stdin_open: true
  # MySQLコンテナ定義
  db:
    # mysqlを使用してコンテナ作成
    image: mysql:5.7
    volumes:
      # Mysql8.0のデフォルトの認証形式をmysql_native_passwordに設定
      - ./mysql-confd:/etc/mysql/conf.d
      # ローカルで保持しているDBをコンテナにマウント
      - db-volume:/var/lib/mysql
    # コンテナ内の環境変数を定義
    environment:
      # mysqlのルートユーザーのパスワード設定
      MYSQL_ROOT_PASSWORD: password
# DBの内容をローカルに保持

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - 80:80
    restart: always #明示的にstopさせるまでリスタートする。（失敗するたび遅延あり）
    volumes:
      - tmp-data:/app/tmp/sockets
      - public-data:/app/public
    depends_on:
      - web 


volumes:
  public-data:
  tmp-data:
  db-volume:
